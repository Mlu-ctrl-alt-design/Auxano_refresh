// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGQcGtbFzYohLFbpGrRxL3
// Component: 3-6KTLpsgf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsbmXrKiwboivdw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bmXrKIWBOIVDW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_auxano.module.css"; // plasmic-import: oGQcGtbFzYohLFbpGrRxL3/projectcss
import sty from "./PlasmicImage.module.css"; // plasmic-import: 3-6KTLpsgf/css

export const PlasmicImage__VariantProps = new Array();

export const PlasmicImage__ArgProps = new Array("name", "title");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicImage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "John Doe",
          title: "Director of commerce"
        },
        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbmXrKiwboivdw()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"person"}
      data-plasmic-override={overrides.person}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.person
      )}
    >
      <div
        data-plasmic-name={"frame16"}
        data-plasmic-override={overrides.frame16}
        className={classNames(projectcss.all, sty.frame16)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___8WerH
          )}
        >
          {(() => {
            try {
              return $props.name;
            } catch (e) {
              if (e instanceof TypeError) {
                return "First Name";
              }
              throw e;
            }
          })()}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2BSkO
          )}
        >
          {(() => {
            try {
              return $props.title;
            } catch (e) {
              if (e instanceof TypeError) {
                return "Director of something";
              }
              throw e;
            }
          })()}
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  person: ["person", "frame16"],
  frame16: ["frame16"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicImage__ArgProps,
          internalVariantPropNames: PlasmicImage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "person") {
    func.displayName = "PlasmicImage";
  } else {
    func.displayName = `PlasmicImage.${nodeName}`;
  }
  return func;
}

export const PlasmicImage = Object.assign(
  // Top-level PlasmicImage renders the root element
  makeNodeComponent("person"),
  {
    // Helper components rendering sub-elements
    frame16: makeNodeComponent("frame16"),
    // Metadata about props expected for PlasmicImage
    internalVariantProps: PlasmicImage__VariantProps,
    internalArgProps: PlasmicImage__ArgProps
  }
);

export default PlasmicImage;
/* prettier-ignore-end */
