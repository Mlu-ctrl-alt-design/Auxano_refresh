// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGQcGtbFzYohLFbpGrRxL3
// Component: Ybl9MM68MVSW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import AuxanoNavbar from "../../AuxanoNavbar"; // plasmic-import: NaO7GDEY89/component
import Button2 from "../../Button2"; // plasmic-import: puKm7ksVLVR/component
import { useScreenVariants as useScreenVariantsbmXrKiwboivdw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bmXrKIWBOIVDW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_auxano.module.css"; // plasmic-import: oGQcGtbFzYohLFbpGrRxL3/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Ybl9MM68MVSW/css
import ZapIcon from "./icons/PlasmicIcon__Zap"; // plasmic-import: jioqPss8S/icon
import MailIcon from "./icons/PlasmicIcon__Mail"; // plasmic-import: _ML9L86z7M/icon
import BarChart2Icon from "./icons/PlasmicIcon__BarChart2"; // plasmic-import: SsHUxMu660/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbmXrKiwboivdw()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <AuxanoNavbar
            data-plasmic-name={"auxanoNavbar"}
            data-plasmic-override={overrides.auxanoNavbar}
            className={classNames("__wab_instance", sty.auxanoNavbar)}
          />

          <div
            data-plasmic-name={"headersection"}
            data-plasmic-override={overrides.headersection}
            className={classNames(projectcss.all, sty.headersection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__leZ2A)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__cuWbo)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gfvTx
                    )}
                  >
                    {"Transforming distressed businesses one at a time "}
                  </div>
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rJu1Q
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__ywkDu
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FCFCFC" }}
                            >
                              {
                                "ABC's of business rescue, corporate restructure, and turnaround strategy."
                              }
                            </span>
                          </React.Fragment>
                        ) : (
                          "ABC's of business rescue, corporate restructure, and turnaround strategy."
                        )}
                      </h3>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__m6VD
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FCFCFC" }}
                          >
                            {
                              "ABC's of business rescue, corporate restructure, and turnaround strategy."
                            }
                          </span>
                        </React.Fragment>
                      </h3>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                )}
              </div>
              <Button2
                className={classNames("__wab_instance", sty.button2__aoojX)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__w6Sa
                  )}
                >
                  {"Get in touch"}
                </div>
              </Button2>
            </p.Stack>
          </div>
          <div
            data-plasmic-name={"visionSection"}
            data-plasmic-override={overrides.visionSection}
            className={classNames(projectcss.all, sty.visionSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__ehnGh)}
            >
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0YHgk)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zsGtt
                    )}
                  >
                    {"Our Mission"}
                  </div>
                </div>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kyatI)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pha7P
                    )}
                  >
                    {
                      "Our dedication to the ABC's of business rescue, corporate restructure, and turnaround strategy drives our growth and ensures our clients' satisfaction."
                    }
                  </div>
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hO87T
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {
                          "Our dedication to the ABC's of business rescue, corporate restructure, and turnaround strategy drives our growth and ensures our clients' satisfaction."
                        }
                      </h4>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__pwXcF
                        )}
                      >
                        {
                          "Our dedication to the ABC's of business rescue, corporate restructure, and turnaround strategy drives our growth and ensures our clients' satisfaction."
                        }
                      </h3>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                )}
              </div>
            </p.Stack>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gvdqu)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"featuresSection"}
              data-plasmic-override={overrides.featuresSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.featuresSection)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                hasGap={true}
                className={classNames(projectcss.all, sty.container)}
              >
                <div
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.heading
                  )}
                >
                  {"OUR VALUES"}
                </div>
                <div
                  data-plasmic-name={"supportingText"}
                  data-plasmic-override={overrides.supportingText}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.supportingText
                  )}
                >
                  {
                    "These are our four promises not only to you our clients but to ourselves as an organisation"
                  }
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                hasGap={true}
                className={classNames(projectcss.all, sty.container2)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__v6Okf)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"featureText"}
                        data-plasmic-override={overrides.featureText}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.featureText)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon"}
                          data-plasmic-override={overrides.featuredIcon}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon
                          )}
                        >
                          <ZapIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__tVDkH
                            )}
                            role={"img"}
                          />
                        </div>
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"textAndSupportingText"}
                          data-plasmic-override={
                            overrides.textAndSupportingText
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textAndSupportingText
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__a3Sh
                            )}
                          >
                            {"Reliability"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText2"}
                            data-plasmic-override={overrides.supportingText2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText2
                            )}
                          >
                            {"we are dedicated to serving our customers."}
                          </div>
                        </p.Stack>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"featureText2"}
                        data-plasmic-override={overrides.featureText2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.featureText2)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon2"}
                          data-plasmic-override={overrides.featuredIcon2}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon2
                          )}
                        >
                          <MailIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yvqM2
                            )}
                            role={"img"}
                          />
                        </div>
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"textAndSupportingText2"}
                          data-plasmic-override={
                            overrides.textAndSupportingText2
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textAndSupportingText2
                          )}
                        >
                          <div
                            data-plasmic-name={"text2"}
                            data-plasmic-override={overrides.text2}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text2
                            )}
                          >
                            {"Integrity"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText3"}
                            data-plasmic-override={overrides.supportingText3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText3
                            )}
                          >
                            {"we deliver on our promise."}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3UOt8
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"featureText3"}
                        data-plasmic-override={overrides.featureText3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.featureText3)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon3"}
                          data-plasmic-override={overrides.featuredIcon3}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon3
                          )}
                        >
                          <BarChart2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__h623V
                            )}
                            role={"img"}
                          />
                        </div>
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"textAndSupportingText3"}
                          data-plasmic-override={
                            overrides.textAndSupportingText3
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textAndSupportingText3
                          )}
                        >
                          <div
                            data-plasmic-name={"text3"}
                            data-plasmic-override={overrides.text3}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text3
                            )}
                          >
                            {"Service"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText4"}
                            data-plasmic-override={overrides.supportingText4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText4
                            )}
                          >
                            {"we find ways to work smarter."}
                          </div>
                        </p.Stack>
                        <div
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames(projectcss.all, sty.button)}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"buttonBase"}
                            data-plasmic-override={overrides.buttonBase}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.buttonBase
                            )}
                          >
                            <div
                              data-plasmic-name={"arrowRight"}
                              data-plasmic-override={overrides.arrowRight}
                              className={classNames(
                                projectcss.all,
                                sty.arrowRight
                              )}
                            />
                          </p.Stack>
                        </div>
                      </p.Stack>
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"featureText4"}
                        data-plasmic-override={overrides.featureText4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.featureText4)}
                      >
                        <div
                          data-plasmic-name={"featuredIcon4"}
                          data-plasmic-override={overrides.featuredIcon4}
                          className={classNames(
                            projectcss.all,
                            sty.featuredIcon4
                          )}
                        >
                          <MailIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__awx04
                            )}
                            role={"img"}
                          />

                          <div
                            data-plasmic-name={"featuredIcon5"}
                            data-plasmic-override={overrides.featuredIcon5}
                            className={classNames(
                              projectcss.all,
                              sty.featuredIcon5
                            )}
                          >
                            <MailIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1KPH
                              )}
                              role={"img"}
                            />
                          </div>
                        </div>
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"textAndSupportingText4"}
                          data-plasmic-override={
                            overrides.textAndSupportingText4
                          }
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.textAndSupportingText4
                          )}
                        >
                          <div
                            data-plasmic-name={"text4"}
                            data-plasmic-override={overrides.text4}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text4
                            )}
                          >
                            {"Excellence"}
                          </div>
                          <div
                            data-plasmic-name={"supportingText5"}
                            data-plasmic-override={overrides.supportingText5}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.supportingText5
                            )}
                          >
                            {
                              "we act in the best interests of our stakeholders."
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"servicesSection"}
            data-plasmic-override={overrides.servicesSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.servicesSection)}
          >
            <div
              data-plasmic-name={"titleSection"}
              data-plasmic-override={overrides.titleSection}
              className={classNames(projectcss.all, sty.titleSection)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3NuFp
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#FCFCFC" }}
                        >
                          {"Our Services"}
                        </span>
                      </React.Fragment>
                    </h2>
                  }

                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
              <Button2
                className={classNames("__wab_instance", sty.button2__t9Auy)}
              >
                {"View all our Services"}
              </Button2>
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__b9542)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__uYw0O)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ralEc
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h5
                        data-plasmic-name={"h5"}
                        data-plasmic-override={overrides.h5}
                        className={classNames(
                          projectcss.all,
                          projectcss.h5,
                          projectcss.__wab_text,
                          sty.h5
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#FCFCFC" }}
                          >
                            {"BUSINESS RESCUE AND TURN AROUND STRATEGY"}
                          </span>
                        </React.Fragment>
                      </h5>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__br0NX
                  )}
                >
                  {
                    "we understand that every business is unique, and we tailor our turnaround strategies to each client's specific needs. Our goal is to help businesses achieve financial stability and long-term success by implementing proven strategies that are customized to their situation."
                  }
                </div>
                <Button2
                  className={classNames("__wab_instance", sty.button2___8FNws)}
                />
              </p.Stack>
              <div className={classNames(projectcss.all, sty.column__l6KUx)} />
            </p.Stack>
          </p.Stack>
          <div
            data-plasmic-name={"teamSection"}
            data-plasmic-override={overrides.teamSection}
            className={classNames(projectcss.all, sty.teamSection)}
          >
            <div className={classNames(projectcss.all, sty.columns__oJsX)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__eO6AR)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__exiyX
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__k89Ur
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#424242" }}
                          >
                            {"Meet the team with 30 years of experience"}
                          </span>
                        </React.Fragment>
                      </h3>
                    }

                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___57R2H
                  )}
                >
                  {
                    "Our goal and vision remain steadfast in that we consistently strive to be the leading competitively business consultancy in South Africa"
                  }
                </div>
              </p.Stack>
              <div className={classNames(projectcss.all, sty.column__bojgp)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pvMhr)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__izBnF
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3Qbb3
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FBFBFB" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wjqxo
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#F7F7F7" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__chqL7
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xyCsH
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FBFBFB" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jR1Ly
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#F7F7F7" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                    {true ? (
                      <div
                        className={classNames(projectcss.all, sty.freeBox__kSO)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aari
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#FBFBFB" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lSdRs
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "#F7F7F7" }}
                            >
                              {"Director of something"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "auxanoNavbar",
    "headersection",
    "visionSection",
    "h4",
    "featuresSection",
    "container",
    "heading",
    "supportingText",
    "container2",
    "content",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text2",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text3",
    "supportingText4",
    "button",
    "buttonBase",
    "arrowRight",
    "featureText4",
    "featuredIcon4",
    "featuredIcon5",
    "textAndSupportingText4",
    "text4",
    "supportingText5",
    "servicesSection",
    "titleSection",
    "h2",
    "h5",
    "teamSection"
  ],

  auxanoNavbar: ["auxanoNavbar"],
  headersection: ["headersection"],
  visionSection: ["visionSection", "h4"],
  h4: ["h4"],
  featuresSection: [
    "featuresSection",
    "container",
    "heading",
    "supportingText",
    "container2",
    "content",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text2",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text3",
    "supportingText4",
    "button",
    "buttonBase",
    "arrowRight",
    "featureText4",
    "featuredIcon4",
    "featuredIcon5",
    "textAndSupportingText4",
    "text4",
    "supportingText5"
  ],

  container: ["container", "heading", "supportingText"],
  heading: ["heading"],
  supportingText: ["supportingText"],
  container2: [
    "container2",
    "content",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text2",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text3",
    "supportingText4",
    "button",
    "buttonBase",
    "arrowRight",
    "featureText4",
    "featuredIcon4",
    "featuredIcon5",
    "textAndSupportingText4",
    "text4",
    "supportingText5"
  ],

  content: [
    "content",
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "supportingText2",
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text2",
    "supportingText3",
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text3",
    "supportingText4",
    "button",
    "buttonBase",
    "arrowRight",
    "featureText4",
    "featuredIcon4",
    "featuredIcon5",
    "textAndSupportingText4",
    "text4",
    "supportingText5"
  ],

  featureText: [
    "featureText",
    "featuredIcon",
    "textAndSupportingText",
    "supportingText2"
  ],

  featuredIcon: ["featuredIcon"],
  textAndSupportingText: ["textAndSupportingText", "supportingText2"],
  supportingText2: ["supportingText2"],
  featureText2: [
    "featureText2",
    "featuredIcon2",
    "textAndSupportingText2",
    "text2",
    "supportingText3"
  ],

  featuredIcon2: ["featuredIcon2"],
  textAndSupportingText2: [
    "textAndSupportingText2",
    "text2",
    "supportingText3"
  ],

  text2: ["text2"],
  supportingText3: ["supportingText3"],
  featureText3: [
    "featureText3",
    "featuredIcon3",
    "textAndSupportingText3",
    "text3",
    "supportingText4",
    "button",
    "buttonBase",
    "arrowRight"
  ],

  featuredIcon3: ["featuredIcon3"],
  textAndSupportingText3: [
    "textAndSupportingText3",
    "text3",
    "supportingText4"
  ],

  text3: ["text3"],
  supportingText4: ["supportingText4"],
  button: ["button", "buttonBase", "arrowRight"],
  buttonBase: ["buttonBase", "arrowRight"],
  arrowRight: ["arrowRight"],
  featureText4: [
    "featureText4",
    "featuredIcon4",
    "featuredIcon5",
    "textAndSupportingText4",
    "text4",
    "supportingText5"
  ],

  featuredIcon4: ["featuredIcon4", "featuredIcon5"],
  featuredIcon5: ["featuredIcon5"],
  textAndSupportingText4: [
    "textAndSupportingText4",
    "text4",
    "supportingText5"
  ],

  text4: ["text4"],
  supportingText5: ["supportingText5"],
  servicesSection: ["servicesSection", "titleSection", "h2", "h5"],
  titleSection: ["titleSection", "h2"],
  h2: ["h2"],
  h5: ["h5"],
  teamSection: ["teamSection"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    auxanoNavbar: makeNodeComponent("auxanoNavbar"),
    headersection: makeNodeComponent("headersection"),
    visionSection: makeNodeComponent("visionSection"),
    h4: makeNodeComponent("h4"),
    featuresSection: makeNodeComponent("featuresSection"),
    container: makeNodeComponent("container"),
    heading: makeNodeComponent("heading"),
    supportingText: makeNodeComponent("supportingText"),
    container2: makeNodeComponent("container2"),
    content: makeNodeComponent("content"),
    featureText: makeNodeComponent("featureText"),
    featuredIcon: makeNodeComponent("featuredIcon"),
    textAndSupportingText: makeNodeComponent("textAndSupportingText"),
    supportingText2: makeNodeComponent("supportingText2"),
    featureText2: makeNodeComponent("featureText2"),
    featuredIcon2: makeNodeComponent("featuredIcon2"),
    textAndSupportingText2: makeNodeComponent("textAndSupportingText2"),
    text2: makeNodeComponent("text2"),
    supportingText3: makeNodeComponent("supportingText3"),
    featureText3: makeNodeComponent("featureText3"),
    featuredIcon3: makeNodeComponent("featuredIcon3"),
    textAndSupportingText3: makeNodeComponent("textAndSupportingText3"),
    text3: makeNodeComponent("text3"),
    supportingText4: makeNodeComponent("supportingText4"),
    button: makeNodeComponent("button"),
    buttonBase: makeNodeComponent("buttonBase"),
    arrowRight: makeNodeComponent("arrowRight"),
    featureText4: makeNodeComponent("featureText4"),
    featuredIcon4: makeNodeComponent("featuredIcon4"),
    featuredIcon5: makeNodeComponent("featuredIcon5"),
    textAndSupportingText4: makeNodeComponent("textAndSupportingText4"),
    text4: makeNodeComponent("text4"),
    supportingText5: makeNodeComponent("supportingText5"),
    servicesSection: makeNodeComponent("servicesSection"),
    titleSection: makeNodeComponent("titleSection"),
    h2: makeNodeComponent("h2"),
    h5: makeNodeComponent("h5"),
    teamSection: makeNodeComponent("teamSection"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
