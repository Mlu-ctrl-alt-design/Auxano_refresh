// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGQcGtbFzYohLFbpGrRxL3
// Component: RdHlrJ1IAu
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Footer from "../../Footer"; // plasmic-import: 6NjpMkUH8g-/component
import { useScreenVariants as useScreenVariantsbmXrKiwboivdw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bmXrKIWBOIVDW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_auxano.module.css"; // plasmic-import: oGQcGtbFzYohLFbpGrRxL3/projectcss
import sty from "./PlasmicAbout.module.css"; // plasmic-import: RdHlrJ1IAu/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: OY1KSwwKNC/icon

export const PlasmicAbout__VariantProps = new Array();

export const PlasmicAbout__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAbout__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbmXrKiwboivdw()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"frame26"}
            data-plasmic-override={overrides.frame26}
            className={classNames(projectcss.all, sty.frame26)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame39"}
                  data-plasmic-override={overrides.frame39}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame39)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nbVh2
                    )}
                  >
                    {"About us."}
                  </div>
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__l3YZm
                  )}
                >
                  {
                    "Unlocking Business Potential with \nTailored Solutions and the ABC's of Business Rescue"
                  }
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          <section className={classNames(projectcss.all, sty.section__kuPeI)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y7IPg)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame27"}
                data-plasmic-override={overrides.frame27}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame27)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___81GA
                  )}
                >
                  {"Our Philosophy"}
                </div>
              </p.Stack>
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame35"}
                data-plasmic-override={overrides.frame35}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame35)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dirdA
                    )}
                  >
                    {
                      "Unlocking Business Potential \nwith Professional Solutions"
                    }
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ymaZf
                    )}
                  >
                    {
                      "The values of Auxano is to provide its customers with a professional, cost effective business solutions by unlocking and improving their operations, providing the growth consulting, Business rescue and restructuring, strategic development, due diligence, business management and financing; tailored to support business performance through outstanding customer service\nOur goal and vision remain steadfast in that we consistently strive to be the leading competitively business consultancy in South Africa.\n\nAuxano is a South African Small to Medium business development firm; developing both the existing and start-up businesses. The consultancy was born and is a product of over 14 yearsâ€™ experience in business banking from the two leading banks in South Africa. The mainstay of our business strategy entails meeting customer requirements and specifications while ensuring unrivalled post-sale service. Our chief focus is to create energising workplace and imposing environments through economically designed business, financial services and business support."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kWtDb
                      )}
                    >
                      {"Get in touch"}
                    </div>
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__bpM3J)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
                <div
                  data-plasmic-name={"imageGallery"}
                  data-plasmic-override={overrides.imageGallery}
                  className={classNames(projectcss.all, sty.imageGallery)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame32"}
                    data-plasmic-override={overrides.frame32}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame32)}
                  >
                    <div
                      data-plasmic-name={"rectangle5"}
                      data-plasmic-override={overrides.rectangle5}
                      className={classNames(projectcss.all, sty.rectangle5)}
                    />
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame34"}
                    data-plasmic-override={overrides.frame34}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame34)}
                  >
                    <div
                      data-plasmic-name={"rectangle4"}
                      data-plasmic-override={overrides.rectangle4}
                      className={classNames(projectcss.all, sty.rectangle4)}
                    />

                    <div
                      data-plasmic-name={"rectangle6"}
                      data-plasmic-override={overrides.rectangle6}
                      className={classNames(projectcss.all, sty.rectangle6)}
                    />
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame33"}
                    data-plasmic-override={overrides.frame33}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame33)}
                  >
                    <div
                      data-plasmic-name={"rectangle7"}
                      data-plasmic-override={overrides.rectangle7}
                      className={classNames(projectcss.all, sty.rectangle7)}
                    />

                    <div
                      data-plasmic-name={"rectangle8"}
                      data-plasmic-override={overrides.rectangle8}
                      className={classNames(projectcss.all, sty.rectangle8)}
                    />
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__bhSih)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame37"}
              data-plasmic-override={overrides.frame37}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame37)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame36"}
                data-plasmic-override={overrides.frame36}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame36)}
              >
                <div
                  data-plasmic-name={"imageGallery2"}
                  data-plasmic-override={overrides.imageGallery2}
                  className={classNames(projectcss.all, sty.imageGallery2)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame38"}
                    data-plasmic-override={overrides.frame38}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame38)}
                  >
                    <div
                      data-plasmic-name={"rectangle9"}
                      data-plasmic-override={overrides.rectangle9}
                      className={classNames(projectcss.all, sty.rectangle9)}
                    />
                  </p.Stack>
                </div>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._2)}
                >
                  <div
                    data-plasmic-name={"ourTeam"}
                    data-plasmic-override={overrides.ourTeam}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.ourTeam
                    )}
                  >
                    {"OUR TEAM "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___118S
                    )}
                  >
                    {
                      "The company is owned, managed and led by the highly competent entrepreneur and seasonal banker, strategist, economist, researcher and Business Executive Mr. Justice Kudumela, who has innovative â€“ edge and exceptional business skills\nIn driving business development, marketing initiatives and operations, Justice has helped, developed and mentored talented and qualified entrepreneurs from the most part of South Africa, of those he helped, some were privileged to receive an invitation to the white house in Washington DC for their valuable input in business\nWith over fourteen (14) years cumulative experience in the retail and business banking from two biggest banks in South Africa, Justice strives to fulfill client satisfaction through prompt, personalized and attentive service. Justice holds MBA degree, Senior Business Rescue Practitioner, Business Coaching certificate, Banking Degree, FSB accredited, and a member of Institute of Business Advisory SA."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button2)}
                  >
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"View full Team"}
                    </div>
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__hlzql)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>
          <section className={classNames(projectcss.all, sty.section__kiuie)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer)}
              />
            </p.Stack>
          </section>
          <div className={classNames(projectcss.all, sty.freeBox__rSv6V)} />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame26",
    "header",
    "content",
    "frame39",
    "frame27",
    "frame35",
    "_1",
    "button",
    "imageGallery",
    "frame32",
    "rectangle5",
    "frame34",
    "rectangle4",
    "rectangle6",
    "frame33",
    "rectangle7",
    "rectangle8",
    "frame37",
    "frame36",
    "imageGallery2",
    "frame38",
    "rectangle9",
    "_2",
    "ourTeam",
    "button2",
    "text2",
    "frame3",
    "footer"
  ],

  frame26: ["frame26", "header", "content", "frame39"],
  header: ["header", "content", "frame39"],
  content: ["content", "frame39"],
  frame39: ["frame39"],
  frame27: ["frame27"],
  frame35: [
    "frame35",
    "_1",
    "button",
    "imageGallery",
    "frame32",
    "rectangle5",
    "frame34",
    "rectangle4",
    "rectangle6",
    "frame33",
    "rectangle7",
    "rectangle8"
  ],

  _1: ["_1", "button"],
  button: ["button"],
  imageGallery: [
    "imageGallery",
    "frame32",
    "rectangle5",
    "frame34",
    "rectangle4",
    "rectangle6",
    "frame33",
    "rectangle7",
    "rectangle8"
  ],

  frame32: ["frame32", "rectangle5"],
  rectangle5: ["rectangle5"],
  frame34: ["frame34", "rectangle4", "rectangle6"],
  rectangle4: ["rectangle4"],
  rectangle6: ["rectangle6"],
  frame33: ["frame33", "rectangle7", "rectangle8"],
  rectangle7: ["rectangle7"],
  rectangle8: ["rectangle8"],
  frame37: [
    "frame37",
    "frame36",
    "imageGallery2",
    "frame38",
    "rectangle9",
    "_2",
    "ourTeam",
    "button2",
    "text2"
  ],

  frame36: [
    "frame36",
    "imageGallery2",
    "frame38",
    "rectangle9",
    "_2",
    "ourTeam",
    "button2",
    "text2"
  ],

  imageGallery2: ["imageGallery2", "frame38", "rectangle9"],
  frame38: ["frame38", "rectangle9"],
  rectangle9: ["rectangle9"],
  _2: ["_2", "ourTeam", "button2", "text2"],
  ourTeam: ["ourTeam"],
  button2: ["button2", "text2"],
  text2: ["text2"],
  frame3: ["frame3", "footer"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAbout__ArgProps,
          internalVariantPropNames: PlasmicAbout__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAbout";
  } else {
    func.displayName = `PlasmicAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicAbout = Object.assign(
  // Top-level PlasmicAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame26: makeNodeComponent("frame26"),
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    frame39: makeNodeComponent("frame39"),
    frame27: makeNodeComponent("frame27"),
    frame35: makeNodeComponent("frame35"),
    _1: makeNodeComponent("_1"),
    button: makeNodeComponent("button"),
    imageGallery: makeNodeComponent("imageGallery"),
    frame32: makeNodeComponent("frame32"),
    rectangle5: makeNodeComponent("rectangle5"),
    frame34: makeNodeComponent("frame34"),
    rectangle4: makeNodeComponent("rectangle4"),
    rectangle6: makeNodeComponent("rectangle6"),
    frame33: makeNodeComponent("frame33"),
    rectangle7: makeNodeComponent("rectangle7"),
    rectangle8: makeNodeComponent("rectangle8"),
    frame37: makeNodeComponent("frame37"),
    frame36: makeNodeComponent("frame36"),
    imageGallery2: makeNodeComponent("imageGallery2"),
    frame38: makeNodeComponent("frame38"),
    rectangle9: makeNodeComponent("rectangle9"),
    _2: makeNodeComponent("_2"),
    ourTeam: makeNodeComponent("ourTeam"),
    button2: makeNodeComponent("button2"),
    text2: makeNodeComponent("text2"),
    frame3: makeNodeComponent("frame3"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicAbout
    internalVariantProps: PlasmicAbout__VariantProps,
    internalArgProps: PlasmicAbout__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAbout;
/* prettier-ignore-end */
