// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGQcGtbFzYohLFbpGrRxL3
// Component: F3vIIsFda1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBarFinal from "../../NavBarFinal"; // plasmic-import: Ba2YaKrrpo/component
import Footer from "../../Footer"; // plasmic-import: 6NjpMkUH8g-/component
import { useScreenVariants as useScreenVariantsbmXrKiwboivdw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bmXrKIWBOIVDW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_auxano.module.css"; // plasmic-import: oGQcGtbFzYohLFbpGrRxL3/projectcss
import sty from "./PlasmicServices.module.css"; // plasmic-import: F3vIIsFda1/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: OY1KSwwKNC/icon
import icons8Puzzle282LwB8Yii from "./images/icons8Puzzle2.svg"; // plasmic-import: 82lwB8yii/picture
import officeBuildingOutline2R4IkxbpYcS from "./images/officeBuildingOutline2.svg"; // plasmic-import: r4IkxbpYcS/picture

export const PlasmicServices__VariantProps = new Array();

export const PlasmicServices__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicServices__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbmXrKiwboivdw()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"services"}
          data-plasmic-override={overrides.services}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.services
          )}
        >
          <NavBarFinal
            data-plasmic-name={"navBarFinal"}
            data-plasmic-override={overrides.navBarFinal}
            className={classNames("__wab_instance", sty.navBarFinal)}
          />

          <div
            data-plasmic-name={"frame26"}
            data-plasmic-override={overrides.frame26}
            className={classNames(projectcss.all, sty.frame26)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              hasGap={true}
              className={classNames(projectcss.all, sty.header)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame39"}
                  data-plasmic-override={overrides.frame39}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame39)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__klvHm
                    )}
                  >
                    {"About us."}
                  </div>
                </p.Stack>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mxoF
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tabletOnly")
                    ? "Unlocking Business Potential with Tailored Solutions and the ABC's of Business Rescue"
                    : "Unlocking Business Potential with \nTailored Solutions and the ABC's of Business Rescue"}
                </div>
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame27"}
              data-plasmic-override={overrides.frame27}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame27)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dUtOo
                )}
              >
                {"Our Services"}
              </div>
            </p.Stack>
            <div className={classNames(projectcss.all, sty.columns__bxgUt)}>
              <div className={classNames(projectcss.all, sty.column__gp29)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_1"}
                  data-plasmic-override={overrides._1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._1)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vGhFf)}
                    displayHeight={"35px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"35px"}
                    loading={"lazy"}
                    src={{
                      src: icons8Puzzle282LwB8Yii,
                      fullWidth: 35,
                      fullHeight: 35,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xZbmV
                    )}
                  >
                    {"BUSINESS RESCUE AND TURN AROUND STRATEGY"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kzIUn
                    )}
                  >
                    {
                      "we understand that every business is unique, and we tailor our turnaround strategies to each client's specific needs. Our goal is to help businesses achieve financial stability and long-term success by implementing proven strategies that are customized to their situation."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rUxni
                      )}
                    >
                      {"Get in touch"}
                    </div>
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___9CvC)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
              </div>
              <div className={classNames(projectcss.all, sty.column__cEwyk)}>
                {(
                  hasVariant(globalVariants, "screen", "tabletOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(projectcss.all, sty.rectangle3)}
                  />
                ) : null}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.columns__smo5A)}>
              <div className={classNames(projectcss.all, sty.column__p6SPk)}>
                {(
                  hasVariant(globalVariants, "screen", "tabletOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    data-plasmic-name={"rectangle2"}
                    data-plasmic-override={overrides.rectangle2}
                    className={classNames(projectcss.all, sty.rectangle2)}
                  />
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.column__tl7E)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty._2)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___2Ku1W)}
                    displayHeight={"35px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"35px"}
                    loading={"lazy"}
                    src={{
                      src: officeBuildingOutline2R4IkxbpYcS,
                      fullWidth: 35,
                      fullHeight: 35,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ekXne
                    )}
                  >
                    {"CORPORATE RESTRUCTURING"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ynE0A
                    )}
                  >
                    {
                      "Corporate restructuring is the process of making significant changes to a company's structure to improve its performance. At Auxano, we offer tailored solutions to help businesses overcome financial challenges and achieve long-term success through effective restructuring strategies."
                    }
                  </div>
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button2)}
                  >
                    <div
                      data-plasmic-name={"text2"}
                      data-plasmic-override={overrides.text2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text2
                      )}
                    >
                      {"Get in touch"}
                    </div>
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__nuFgh)}
                      role={"img"}
                    />
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </p.Stack>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  services: [
    "services",
    "navBarFinal",
    "frame26",
    "header",
    "content",
    "frame39",
    "section",
    "frame27",
    "_1",
    "button",
    "rectangle3",
    "rectangle2",
    "_2",
    "button2",
    "text2",
    "freeBox",
    "footer"
  ],

  navBarFinal: ["navBarFinal"],
  frame26: ["frame26", "header", "content", "frame39"],
  header: ["header", "content", "frame39"],
  content: ["content", "frame39"],
  frame39: ["frame39"],
  section: [
    "section",
    "frame27",
    "_1",
    "button",
    "rectangle3",
    "rectangle2",
    "_2",
    "button2",
    "text2"
  ],

  frame27: ["frame27"],
  _1: ["_1", "button"],
  button: ["button"],
  rectangle3: ["rectangle3"],
  rectangle2: ["rectangle2"],
  _2: ["_2", "button2", "text2"],
  button2: ["button2", "text2"],
  text2: ["text2"],
  freeBox: ["freeBox", "footer"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicServices__ArgProps,
          internalVariantPropNames: PlasmicServices__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicServices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "services") {
    func.displayName = "PlasmicServices";
  } else {
    func.displayName = `PlasmicServices.${nodeName}`;
  }
  return func;
}

export const PlasmicServices = Object.assign(
  // Top-level PlasmicServices renders the root element
  makeNodeComponent("services"),
  {
    // Helper components rendering sub-elements
    navBarFinal: makeNodeComponent("navBarFinal"),
    frame26: makeNodeComponent("frame26"),
    header: makeNodeComponent("header"),
    content: makeNodeComponent("content"),
    frame39: makeNodeComponent("frame39"),
    section: makeNodeComponent("section"),
    frame27: makeNodeComponent("frame27"),
    _1: makeNodeComponent("_1"),
    button: makeNodeComponent("button"),
    rectangle3: makeNodeComponent("rectangle3"),
    rectangle2: makeNodeComponent("rectangle2"),
    _2: makeNodeComponent("_2"),
    button2: makeNodeComponent("button2"),
    text2: makeNodeComponent("text2"),
    freeBox: makeNodeComponent("freeBox"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicServices
    internalVariantProps: PlasmicServices__VariantProps,
    internalArgProps: PlasmicServices__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicServices;
/* prettier-ignore-end */
