// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oGQcGtbFzYohLFbpGrRxL3
// Component: NaO7GDEY89
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantsbmXrKiwboivdw } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: bmXrKIWBOIVDW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_auxano.module.css"; // plasmic-import: oGQcGtbFzYohLFbpGrRxL3/projectcss
import sty from "./PlasmicAuxanoNavbar.module.css"; // plasmic-import: NaO7GDEY89/css
import MenuAlt01SvgrepoComsvgIcon from "./icons/PlasmicIcon__MenuAlt01SvgrepoComsvg"; // plasmic-import: Lv8Znu3CNG/icon
import logo212XpngXScDVnNt from "./images/logo212Xpng.png"; // plasmic-import: xScDVn-NT/picture

export const PlasmicAuxanoNavbar__VariantProps = new Array();

export const PlasmicAuxanoNavbar__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAuxanoNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbmXrKiwboivdw()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        hasGap={true}
        className={classNames(projectcss.all, sty.navbar)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"logo21"}
          data-plasmic-override={overrides.logo21}
          hasGap={true}
          className={classNames(projectcss.all, sty.logo21)}
        >
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : "auto"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly") ? "45%" : "65%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "auto"
                : "auto"
            }
            loading={"lazy"}
            src={{
              src: logo212XpngXScDVnNt,
              fullWidth: 439,
              fullHeight: 134,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <MenuAlt01SvgrepoComsvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            onClick={async event => {
              const $steps = {};
              $steps["updateStateVariable"] = true
                ? (() => {
                    const actionArgs = {};
                    return __wrapUserFunction(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "iQn8evcho",
                        componentUuid: "NaO7GDEY89"
                      },
                      () =>
                        (({ variable, value, startIndex, deleteCount }) => {
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]),
                      actionArgs
                    );
                  })()
                : undefined;
              if (
                typeof $steps["updateStateVariable"] === "object" &&
                typeof $steps["updateStateVariable"].then === "function"
              ) {
                $steps["updateStateVariable"] = await __wrapUserPromise(
                  {
                    type: "InteractionLoc",
                    actionName: "updateVariable",
                    interactionUuid: "iQn8evcho",
                    componentUuid: "NaO7GDEY89"
                  },
                  $steps["updateStateVariable"]
                );
              }
            }}
            role={"img"}
          />
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"linksDesktop"}
            data-plasmic-override={overrides.linksDesktop}
            className={classNames(projectcss.all, sty.linksDesktop)}
          >
            <p.Stack
              as={"a"}
              data-plasmic-name={"linkItem2"}
              data-plasmic-override={overrides.linkItem2}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.linkItem2
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToHomepage"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "pQDC_r1pj",
                            componentUuid: "NaO7GDEY89",
                            argName: "destination"
                          },
                          () => `/`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "pQDC_r1pj",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToHomepage"] === "object" &&
                  typeof $steps["goToHomepage"].then === "function"
                ) {
                  $steps["goToHomepage"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "pQDC_r1pj",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToHomepage"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kPo3Q
                )}
              >
                {"Home"}
              </div>
            </p.Stack>
            <p.Stack
              as={"a"}
              data-plasmic-name={"linkItem5"}
              data-plasmic-override={overrides.linkItem5}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.linkItem5
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "Rp9Tvn1Gx",
                            componentUuid: "NaO7GDEY89",
                            argName: "destination"
                          },
                          () => `/about`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "Rp9Tvn1Gx",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "Rp9Tvn1Gx",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3Aikf
                )}
              >
                {"About"}
              </div>
            </p.Stack>
            <p.Stack
              as={"a"}
              data-plasmic-name={"linkItem7"}
              data-plasmic-override={overrides.linkItem7}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.linkItem7
              )}
              onClick={async event => {
                const $steps = {};
                $steps["goToServices"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "Wkk9mV3X9",
                            componentUuid: "NaO7GDEY89",
                            argName: "destination"
                          },
                          () => `/services`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "Wkk9mV3X9",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToServices"] === "object" &&
                  typeof $steps["goToServices"].then === "function"
                ) {
                  $steps["goToServices"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "Wkk9mV3X9",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToServices"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t3VyU
                )}
              >
                {"Services"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"linkItem6"}
              data-plasmic-override={overrides.linkItem6}
              hasGap={true}
              className={classNames(projectcss.all, sty.linkItem6)}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {};
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "ch4tARe8ux",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "ch4tARe8ux",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ht8BS
                )}
              >
                {"Contact"}
              </div>
            </p.Stack>
          </div>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"navItems"}
            data-plasmic-override={overrides.navItems}
            hasGap={true}
            className={classNames(projectcss.all, sty.navItems)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              hasGap={true}
              className={classNames(projectcss.all, sty.button)}
            >
              <div
                data-plasmic-name={"getInTouch"}
                data-plasmic-override={overrides.getInTouch}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.getInTouch
                )}
              >
                {"Get in touch "}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              hasGap={true}
              className={classNames(projectcss.all, sty.button2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__klc5V
                )}
              >
                {"Let us  call you"}
              </div>
            </p.Stack>
          </p.Stack>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
          <div
            data-plasmic-name={"linksMobile"}
            data-plasmic-override={overrides.linksMobile}
            className={classNames(projectcss.all, sty.linksMobile)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"linkItem3"}
              data-plasmic-override={overrides.linkItem3}
              hasGap={true}
              className={classNames(projectcss.all, sty.linkItem3)}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "zh93STDnZb",
                            componentUuid: "NaO7GDEY89",
                            argName: "destination"
                          },
                          () => `/`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "zh93STDnZb",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "zh93STDnZb",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rdJnp
                )}
              >
                {"Home"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"linkItem8"}
              data-plasmic-override={overrides.linkItem8}
              hasGap={true}
              className={classNames(projectcss.all, sty.linkItem8)}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {};
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "jcrTTIaH52L",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "jcrTTIaH52L",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vpKhS
                )}
              >
                {"About"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"linkItem9"}
              data-plasmic-override={overrides.linkItem9}
              hasGap={true}
              className={classNames(projectcss.all, sty.linkItem9)}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {
                        destination: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "navigation",
                            interactionUuid: "SCSsFz7VRCh",
                            componentUuid: "NaO7GDEY89",
                            argName: "destination"
                          },
                          () => `/services`
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "SCSsFz7VRCh",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "SCSsFz7VRCh",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eeRs6
                )}
              >
                {"Services"}
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              data-plasmic-name={"linkItem10"}
              data-plasmic-override={overrides.linkItem10}
              hasGap={true}
              className={classNames(projectcss.all, sty.linkItem10)}
              onClick={async event => {
                const $steps = {};
                $steps["goToAbout"] = true
                  ? (() => {
                      const actionArgs = {};
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "navigation",
                          interactionUuid: "vpGcsugnrvC",
                          componentUuid: "NaO7GDEY89"
                        },
                        () =>
                          (({ destination }) => {
                            location.assign(destination);
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["goToAbout"] === "object" &&
                  typeof $steps["goToAbout"].then === "function"
                ) {
                  $steps["goToAbout"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "navigation",
                      interactionUuid: "vpGcsugnrvC",
                      componentUuid: "NaO7GDEY89"
                    },
                    $steps["goToAbout"]
                  );
                }
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xAgF1
                )}
              >
                {"Contact"}
              </div>
            </p.Stack>
          </div>
        ) : null}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "logo21",
    "img",
    "svg",
    "linksDesktop",
    "linkItem2",
    "linkItem5",
    "linkItem7",
    "linkItem6",
    "navItems",
    "button",
    "getInTouch",
    "button2",
    "linksMobile",
    "linkItem3",
    "linkItem8",
    "linkItem9",
    "linkItem10"
  ],

  navbar: [
    "navbar",
    "logo21",
    "img",
    "svg",
    "linksDesktop",
    "linkItem2",
    "linkItem5",
    "linkItem7",
    "linkItem6",
    "navItems",
    "button",
    "getInTouch",
    "button2",
    "linksMobile",
    "linkItem3",
    "linkItem8",
    "linkItem9",
    "linkItem10"
  ],

  logo21: ["logo21", "img"],
  img: ["img"],
  svg: ["svg"],
  linksDesktop: [
    "linksDesktop",
    "linkItem2",
    "linkItem5",
    "linkItem7",
    "linkItem6"
  ],

  linkItem2: ["linkItem2"],
  linkItem5: ["linkItem5"],
  linkItem7: ["linkItem7"],
  linkItem6: ["linkItem6"],
  navItems: ["navItems", "button", "getInTouch", "button2"],
  button: ["button", "getInTouch"],
  getInTouch: ["getInTouch"],
  button2: ["button2"],
  linksMobile: [
    "linksMobile",
    "linkItem3",
    "linkItem8",
    "linkItem9",
    "linkItem10"
  ],

  linkItem3: ["linkItem3"],
  linkItem8: ["linkItem8"],
  linkItem9: ["linkItem9"],
  linkItem10: ["linkItem10"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuxanoNavbar__ArgProps,
          internalVariantPropNames: PlasmicAuxanoNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAuxanoNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuxanoNavbar";
  } else {
    func.displayName = `PlasmicAuxanoNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicAuxanoNavbar = Object.assign(
  // Top-level PlasmicAuxanoNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    logo21: makeNodeComponent("logo21"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    linksDesktop: makeNodeComponent("linksDesktop"),
    linkItem2: makeNodeComponent("linkItem2"),
    linkItem5: makeNodeComponent("linkItem5"),
    linkItem7: makeNodeComponent("linkItem7"),
    linkItem6: makeNodeComponent("linkItem6"),
    navItems: makeNodeComponent("navItems"),
    button: makeNodeComponent("button"),
    getInTouch: makeNodeComponent("getInTouch"),
    button2: makeNodeComponent("button2"),
    linksMobile: makeNodeComponent("linksMobile"),
    linkItem3: makeNodeComponent("linkItem3"),
    linkItem8: makeNodeComponent("linkItem8"),
    linkItem9: makeNodeComponent("linkItem9"),
    linkItem10: makeNodeComponent("linkItem10"),
    // Metadata about props expected for PlasmicAuxanoNavbar
    internalVariantProps: PlasmicAuxanoNavbar__VariantProps,
    internalArgProps: PlasmicAuxanoNavbar__ArgProps
  }
);

export default PlasmicAuxanoNavbar;
/* prettier-ignore-end */
